<launch>

    <!-- 
        Main locmap launch file. Use this one (see docs) for everything you do!

        TODO: On the long term this launch file should be "converted" to some kind of high-level controller package that control the whole system
    -->

    <!-- !Arguments -->
    <arg name="enable_sim_bridge" default="false" />
    <arg name="perception_mode" default="none" />
    <arg name="slam_type" default="local_fastslam" />
    <arg name="use_sim_time" default="true" />
    <arg name="use_interface" default="true" />

    <!-- Always enable simtime if replaying rosbags !-->
    <param name="use_sim_time" value="$(arg use_sim_time)" />

    <!-- ! Sim bridge -->
    <group if="$(arg enable_sim_bridge)">
        <include file="$(find fsds_ros_bridge)/launch/fsds_ros_bridge.launch" pass_all_args="true" />
    </group>

    <group if="$(eval perception_mode == 'simulated')">
        <node pkg="locmap_simulator" output="screen" type="perception.py" name="locmap_perception_sim">
            <param name="base_link_frame" value="ugr/car_base_link" />
            <param name="viewing_distance" value="20" />
            <param name="fov" value="60" />
            <param name="add_noise" value="False" />
            <param name="cone_noise" value="0.5" />
            <param name="publish_delay" value="0.2" />
            <param name="publish_rate" value="10" />
            # Input output remapping
            <remap from="/input/track" to="fsds/testing_only/track" />
            <remap from="/input/odometry" to="ugr/gt_car/odometry" />
            <remap from="/output/observations" to="ugr/car/sensors/perception" />
        </node>
    </group>

    <!-- ! Coordinate transformations -->

    <group>
        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_axis0" args="-0.36 0.34 0 0 0 0 1 ugr/car_base_link ugr/car_base_link/axis0" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_axis1" args="-0.36 -0.34 0 0 0 0 1 ugr/car_base_link ugr/car_base_link/axis1" />

        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_lidar0" args="0.0 0 0.37 0 0 0 1 ugr/car_base_link ugr/car_base_link/lidar0" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_ouster_sensor" args="0 0 0 0 0 0 1 ugr/car_base_link/lidar0 os_sensor" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_ouster_imu" args="0 0 0 0 0 0 1 os_sensor os_imu" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_ouster_lidar" args="0 0 0 0 0 1 0 os_sensor os_lidar" />

        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_cam0" args="0.06 0 0.74 0 0 0 1 ugr/car_base_link ugr/car_base_link/cam0" />

        <!-- TODO plaatsing IMU's en GPS bekijken -->
        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_gps0" args="0 0 0 0 0 0 1 ugr/car_base_link ugr/car_base_link/gps0" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_imu0" args="0 0 0 0 0 0 1 ugr/car_base_link ugr/car_base_link/imu0" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_imu1" args="0 0 0 0 0 0 1 ugr/car_base_link ugr/car_base_link/imu1" />
    </group>

    <!-- ! LocMap interface. This script ensures that data (coming from fsds) uses the correct coordinate frames and headers -->
    <group if="$(arg use_interface)">
        <node pkg="locmap_controller" type="interface.py" name="locmap_interface" output="screen">

            <remap from="/input/perception_update" to="/perception/raw_perception_update" />
            <remap from="/input/gss" to="/fsds/gss" />
            <remap from="/input/imu" to="/fsds/imu" />
            <remap from="/input/gt_odometry" to="/fsds/testing_only/odom" />
            <remap from="/input/gt_track" to="/fsds/testing_only/track" />
            <remap from="/input/gps" to="/fsds/gps" />

            <remap from="/output/observations" to="/ugr/car/sensors/perception" />
            <remap from="/output/gss" to="ugr/car/sensors/encoder0" />
            <remap from="/output/imu" to="ugr/car/sensors/imu0" />
            <remap from="/output/gt_odometry" to="ugr/gt_car/odometry" />
            <remap from="/output/gt_track" to="ugr/gt_car/track" />
            <remap from="/output/gps" to="ugr/car/sensors/gps" />
        </node>
    </group>

    <!-- ! Other simulation nodes -->

    <!-- ! SLAM Framework -->

    <group if="$(eval slam_type == 'sensor_fusion_only')">
        <include file="$(find locmap_controller)/launch/sensor_fusion/full.launch" pass_all_args="true" />
    </group>

    <group if="$(eval slam_type == 'local_fastslam' )">

        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_map_car_sensors_cam1" args="0 0 0.8 0 0 0 1 ugr/car_base_link fsds/camera/cam1" />

        <include file="$(find locmap_controller)/launch/sensor_fusion/full.launch" pass_all_args="true" />

        <node pkg="locmap_slam" output="screen" type="local_fastslam.py" name="local_fastslam_car" respawn="True">
            # Parameters
            <param name="world_frame" value="ugr/car_odom" />
            <param name="base_link_frame" value="ugr/car_base_link" />

            <param name="fastslam/particle_count" value="50" />
            <rosparam param="fastslam/measurement_covariance">[0.1, 0.0, 0.0, 0.1]</rosparam>
            <rosparam param="fastslam/input_noise">[0.5, 0.1, 0.0, 0.05, 0.0, 0.0]</rosparam>
            <param name="fastslam/threshold_distance" value="2" />
            <param name="max_landmark_range" value="20" />
            <param name="observation_queue_size" value="1" />
            # Input/output remapping
            <remap from="/input/observations" to="ugr/car/sensors/perception" />
            <remap from="/input/odometry" to="ugr/car/odometry/filtered/odom" />

            <remap from="/output/observations" to="ugr/car/observations/local" />
            <remap from="/output/map" to="ugr/car/map/local" />
            <remap from="/output/odom" to="ugr/car/odometry/slam/local" />
            <remap from="/output/path" to="ugr/car/path/local" />
            <remap from="/output/particles" to="ugr/car/slam/particles" />
        </node>
    </group>
    <group if="$(eval slam_type == 'perception_check' )">

        <include file="$(find locmap_controller)/launch/sensor_fusion/full.launch" pass_all_args="true" />

        <node pkg="locmap_clustering" output="screen" type="clustermapping.py" name="local_clustering_gt_car" respawn="True">
            # Parameters
            <param name="world_frame" value="ugr/car_odom" />
            <param name="base_link_frame" value="ugr/car_base_link" />

            <param name="clustering/eps" value="0.2" />
            <param name="clustering/min_samples" value="20" />
            <param name="clustering/nr_of_classes" value="2" />
            <param name="clustering/expected_nr_of_landmarks" value="1000" />

            <param name="max_landmark_range" value="5" />
            <param name="observation_queue_size" value="1" />
            # Input/output remapping
            <remap from="/input/observations" to="/lidar/perception/observations" />

            <remap from="/output/observations" to="ugr/car/observations/global" />
            <remap from="/output/map" to="ugr/car/map/global" />
            <remap from="/output/samples" to="ugr/car/samples/local/clustered" />
        </node>
    </group>
    <group if="$(eval slam_type == 'global_clustering' )">

        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_map_car_sensors_cam1" args="0 0 0.8 0 0 0 1 ugr/car_base_link fsds/camera/cam1" />

        <include file="$(find locmap_controller)/launch/sensor_fusion/full.launch" pass_all_args="true" />

        <node pkg="locmap_clustering" output="screen" type="clustermapping.py" name="local_clustering_gt_car" respawn="True">
            # Parameters
            <param name="world_frame" value="ugr/car_map" />
            <param name="base_link_frame" value="ugr/car_base_link" />

            <param name="clustering/eps" value="0.5" />
            <param name="clustering/min_samples" value="5" />
            <param name="clustering/nr_of_classes" value="2" />
            <param name="clustering/expected_nr_of_landmarks" value="1000" />

            <param name="max_landmark_range" value="0" />
            <param name="observation_queue_size" value="1" />
            # Input/output remapping
            <remap from="/input/observations" to="ugr/car/sensors/perception" />

            <remap from="/output/observations" to="ugr/car/observations/global" />
            <remap from="/output/map" to="ugr/car/map/global" />
            <remap from="/output/samples" to="ugr/car/samples/local/clustered" />
        </node>
    </group>

    <!-- ! Data gathering nodes -->

    <!-- TODO -->

</launch>