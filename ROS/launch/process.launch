<launch>
    <!-- ! Processing nodes -->
    <arg name="iteration" default="1" />
    <arg name="slamtype" default="clustering" />
    <arg name="reference_frame" default="ugr/car_odom" />
    <arg name="use_sim_time" default="false" />

    <param name="use_sim_time" value="$(arg use_sim_time)" />
    <param name="iteration" value="$(arg iteration)" />

    <!-- ? Coordinate transformations -->

    <group>
        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_axis0" args="-0.36 0.34 0 0 0 0 1 ugr/car_base_link ugr/car_base_link/axis0" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_axis1" args="-0.36 -0.34 0 0 0 0 1 ugr/car_base_link ugr/car_base_link/axis1" />

        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_lidar0" args="0.0 0 0.37 0 0 0 1 ugr/car_base_link ugr/car_base_link/lidar0" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_ouster_sensor" args="0 0 0 0 0 0 1 ugr/car_base_link/lidar0 os_sensor" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_ouster_imu" args="0 0 0 0 0 0 1 os_sensor os_imu" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_ouster_lidar" args="0 0 0 0 0 1 0 os_sensor os_lidar" />

        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_cam0" args="0.06 0 0.74 0 0 0 1 ugr/car_base_link ugr/car_base_link/cam0" />

        <!-- imu0: front, imu1: back -->
        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_gps_ublox_right" args="0.06 -0.36 0.74 0 0 0 1 ugr/car_base_link ugr/car_base_link/gps0" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_gps_ublox_left" args="0.06 0.36 0.74 0 0 0 1 ugr/car_base_link ugr/car_base_link/gps1" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_gps_pepwave" args="0.06 -0.25 0.74 0 0 0 1 ugr/car_base_link ugr/car_base_link/gps2" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_imu0" args="0.34 0 0 1 0 0 0 ugr/car_base_link ugr/car_base_link/imu0" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="ugr_imu1" args="-0.26 0 0.37 0 0 0 1 ugr/car_base_link ugr/car_base_link/imu1" />
    </group>


    <!-- ? State Estimation -->

    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization_node_odom_car_$(arg iteration)" respawn="true">

        <!-- Fusing continous (drifting) data, so world_frame must be odom -->
        <param name="world_frame" value="ugr/car_odom" />
        <param name="map_frame" value="ugr/car_map" />
        <param name="odom_frame" value="ugr/car_odom" />
        <param name="base_link_frame" value="ugr/car_base_link" />
        <param name="frequency" value="30" />
        <param name="sensor_timeout" value="1" />

        <param name="two_d_mode" value="true" />
        <param name="reset_on_time_jump" value="true" />

        <!-- Angular rate -->
        <param name="imu0" value="/ugr/car/sensors/imu0/angular_rate" />
        <rosparam param="imu0_config">[false, false, false,
                                       false, false, false,
                                       false, false, false,
                                       false, false, true,
                                       false, false, false]</rosparam>
        <param name="imu0_differential" value="false" />
        <param name="imu0_relative" value="true" />

        <param name="imu1" value="/ugr/car/sensors/imu1/angular_rate" />
        <rosparam param="imu1_config">[false, false, false,
                                       false, false, false,
                                       false, false, false,
                                       false, false, true,
                                       false, false, false]</rosparam>
        <param name="imu1_differential" value="false" />
        <param name="imu1_relative" value="true" />

        <param name="imu2" value="/ugr/car/sensors/imu2" />
        <rosparam param="imu2_config">[false, false, false,
                                       false, false, false,
                                       false, false, false,
                                       false, false, true,
                                       false, false, false]</rosparam>
        <param name="imu2_differential" value="false" />
        <param name="imu2_relative" value="true" />

        <!-- Wheel encoders -->
        <param name="twist0" value="ugr/car/sensors/encoder0" />
        <rosparam param="twist0_config">
            [false, false, false,
             false, false, false,
             true, false, false,
             false, false, false,
             false, false, false]</rosparam>
        <param name="twist1" value="ugr/car/sensors/encoder1" />
        <rosparam param="twist1_config">
            [false, false, false,
             false, false, false,
             true, false, false,
             false, false, false,
             false, false, false]</rosparam>

        <!-- Remap the output -->
        <remap from="odometry/filtered" to="ugr/car/odometry/filtered/odom" />

    </node>

    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization_node_map_car_$(arg iteration)" respawn="true">
        # Fusing absolute data, so world_frame must be map
        <param name="world_frame" value="ugr/car_map" />
        <param name="map_frame" value="ugr/car_map" />
        <param name="odom_frame" value="ugr/car_odom" />
        <param name="base_link_frame" value="ugr/car_base_link" />
        <param name="frequency" value="30" />
        <param name="sensor_timeout" value="1" />

        <param name="two_d_mode" value="true" />
        <param name="reset_on_time_jump" value="true" />

        <param name="smooth_lagged_data" value="true" />
        <param name="history_length" value="100" />
        <param name="permit_corrected_publication" value="true" />

        <!-- Wheel encoders -->
        <param name="twist0" value="ugr/car/sensors/encoder0" />
        <rosparam param="twist0_config">
            [false, false, false,
             false, false, false,
             true, false, false,
             false, false, false,
             false, false, false]</rosparam>
        <param name="twist1" value="ugr/car/sensors/encoder1" />
        <rosparam param="twist1_config">
            [false, false, false,
             false, false, false,
             true, false, false,
             false, false, false,
             false, false, false]</rosparam>

        <!-- Angular rate (backup for absolute yaw) -->
        <param name="imu0" value="/ugr/car/sensors/imu0/angular_rate" />
        <rosparam param="imu0_config">[false, false, false,
                                       false, false, false,
                                       false, false, false,
                                       false, false, true,
                                       false, false, false]</rosparam>
        <param name="imu0_differential" value="false" />
        <param name="imu0_relative" value="true" />

        <param name="imu1" value="/ugr/car/sensors/imu1/angular_rate" />
        <rosparam param="imu1_config">[false, false, false,
                                       false, false, false,
                                       false, false, false,
                                       false, false, true,
                                       false, false, false]</rosparam>
        <param name="imu1_differential" value="false" />
        <param name="imu1_relative" value="true" />

        <param name="imu2" value="/ugr/car/sensors/imu2" />
        <rosparam param="imu2_config">[false, false, false,
                                       false, false, false,
                                       false, false, false,
                                       false, false, true,
                                       false, false, false]</rosparam>
        <param name="imu2_differential" value="false" />
        <param name="imu2_relative" value="true" />

        <!-- Absolute heading (yaw) -->
        <param name="imu0" value="/ugr/car/sensors/heading" />
        <rosparam param="imu0_config">[false, false, false,
                               false, false, true,
                               false, false, false,
                               false, false, false,
                               false, false, false]</rosparam>
        <param name="imu0_differential" value="false" />
        <param name="imu0_relative" value="true" />

        <param name="odom0" value="/ugr/car/odometry/filtered/gps" />
        <rosparam param="odom0_config">[true, true, false,
                                       false, false, false,
                                       false, false, false,
                                       false, false, false,
                                       false, false, false]</rosparam>
        <param name="odom0_differential" value="false" />
        <param name="odom0_relative" value="true" />

        <remap from="odometry/filtered" to="/ugr/car/odometry/filtered/map" />
    </node>


    <!-- navsat node. This basically transforms NavSatFix messages (which are in GPS coordinate system) to an Odometry message, which
        is fed back to the 'map' localization node
      -->
    <node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform_node_car_$(arg iteration)" respawn="true">

        <param name="magnetic_declination_radians" value="0.032" />
        <param name="yaw_offset" value="0" />
        <param name="zero_altitude" value="true" />
        <param name="frequency" value="20" />

        <param name="publish_filtered_gps" value="true" />

        <remap from="odometry/filtered" to="ugr/car/odometry/filtered/map" />
        <remap from="imu/data" to="/ugr/car/sensors/heading" />
        <remap from="gps/fix" to="/ugr/car/sensors/gps1" />

        <remap from="odometry/gps" to="ugr/car/odometry/filtered/gps" />
    </node>

    <!-- ? Lidar -->
    <include file="$(find lidar)/launch/lidar.launch" pass_all_args="true"></include>

    <!-- ? Clustermapping (if applicable)-->
    <group if="$(eval arg('slamtype') == 'clustering')">

        <node pkg="locmap_clustering" output="screen" type="clustermapping.py" name="local_clustering" respawn="True">
            # Parameters
            <param name="world_frame" value="ugr/car_odom" />
            <param name="base_link_frame" value="ugr/car_base_link" />

            <param name="clustering/eps" value="0.2" />
            <param name="clustering/min_samples" value="10" />
            <param name="clustering/nr_of_classes" value="2" />
            <param name="clustering/expected_nr_of_landmarks" value="2500" />

            <param name="clustering/mode" value="local" />
            <param name="max_landmark_range" value="20" />
            <param name="observation_queue_size" value="1" />

            <remap from="/input/observations" to="ugr/car/observations/lidar" />
            <remap from="/output/observations" to="ugr/car/observations/clustering" />
            <remap from="/output/map" to="ugr/car/map/clustering" />
            <remap from="/output/samples" to="ugr/car/samples/clustering" />
        </node>

        <node pkg="locmap_vis" output="screen" type="vis_car.py" name="fdlksjafldskjflakdjfklsja">
            <param name="namespace" value="$(arg slamtype)/car" />

            <remap from="/input/vis" to="/ugr/car/odometry/filtered/odom" />
            <remap from="/output/vis" to="/vis/locmap" />
        </node>
    </group>

    <group if="$(eval arg('slamtype') == 'fastslam')">

        <node pkg="locmap_fastslam" output="screen" type="fastslam1" name="local_fastslam_car" respawn="False">
            # Parameters
            <param name="world_frame" value="ugr/car_odom" />
            <param name="base_link_frame" value="ugr/car_base_link" />
            <param name="slam_world_frame" value="ugr/slam_map" />

            <param name="particle_count" value="70" />
            <param name="effective_particle_count" value="50" />
            <param name="eps" value="0.5" />
            <param name="clustering_eps" value="0.25"/>
            <param name="max_range" value="15" />
            <param name="max_half_angle" value="1.5" />
            <param name="expected_range" value="15" />
            <param name="expected_half_angle" value="1.5" />
            <param name="observe_dt" value="0.0" />
            <param name="post_clustering" value="false"/>

            <rosparam param="measurement_covariance">[0.4, 0.0, 0.0, 0.1]</rosparam>
            <rosparam param="input_noise">[0.1, 0.0, 0.0, 0.02]</rosparam>
            <param name="acceptance_score" value="2.0" />
            <param name="penalty_score" value="-0.5" />
            <param name="discard_score" value="-100.0" />
            # Input/output remapping
            <remap from="/input/observations" to="ugr/car/observations/lidar" />

            <remap from="/output/observations" to="/ugr/car/observations/fastslam" />
            <remap from="/output/map" to="/ugr/car/map/fastslam" />
            <remap from="/output/odom" to="/ugr/car/odometry/filtered/fastslam" />
        </node>
        <node pkg="locmap_vis" output="screen" type="vis_car.py" name="fdlksjafldskjflakdjfklsja">
            <param name="namespace" value="$(arg slamtype)/car" />

            <remap from="/input/vis" to="/ugr/car/odometry/filtered/fastslam" />
            <remap from="/output/vis" to="/vis/locmap" />
        </node>

    </group>

    <!-- ? Vis observations -->

    <node pkg="locmap_vis" output="screen" name="vis_obs" type="vis_obs.py">

        <param name="use_cones" value="true" />
        <param name="namespace" value="$(arg slamtype)/observations" />

        <remap from="/input/vis" to="/ugr/car/observations/$(arg slamtype)" />
        <remap from="/output/vis" to="/vis/locmap" />
    </node>
    <node pkg="locmap_vis" output="screen" name="vis_map" type="vis_obs.py">

        <param name="use_cones" value="true" />
        <param name="namespace" value="$(arg slamtype)/map" />

        <remap from="/input/vis" to="/ugr/car/map/$(arg slamtype)" />
        <remap from="/output/vis" to="/vis/locmap" />
    </node>

    <!-- ? Pathplanning  -->
    <node pkg="pathplanning" type="run_node.py" name="pathplanning" respawn="true">
        <param name="output_frame" value="$(arg reference_frame)" />
        <param name="algoritme" value="rrt" />
        <param name="expand_dist" value="0.4" />
        <param name="plan_dist" value="12.0" />
        <param name="max_iter" value="100" />
        <param name="max_angle_change" value="0.7" />
        <param name="safety_dist" value="1.2" />
        <param name="track_width" value="3.2" />
        <param name="max_track_width" value="4" />
        <param name="search_rad" value="None" />
        <param name="iter_threshold" value="560" />
        <param name="angle_inc" value="0.2" />
        <param name="angle_fac" value="1.5" />

        <remap from="/input/local_map" to="/ugr/car/observations/$(arg slamtype)" />
        <remap from="/output/path" to="/pathplanning/path" />
        <remap from="/output/path_stamped" to="/pathplanning/path_stamped"/>
    </node>


</launch>